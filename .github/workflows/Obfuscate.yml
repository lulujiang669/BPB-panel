name: Build Obfuscate BPB worker  # 工作流名称：构建并混淆BPB worker

on:
  push:
    branches:
      - main  # 当main分支有push时触发
  schedule:
    - cron: '3 1,13 * * *'  # 每天UTC时间1:03和13:03自动运行（北京时间9:03和21:03）
  workflow_dispatch:        # 保留手动触发按钮

permissions:
  contents: write  # 授予写入仓库内容的权限（用于后续git push）

jobs:
  build:
    runs-on: ubuntu-latest  # 使用最新版Ubuntu系统作为运行环境

    steps:
      # 第一步：检出代码
      - name: Check out the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整git历史记录（用于后续git diff比较）

      # 第二步：设置Node.js环境
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "latest"  # 使用最新版Node.js

      # 第三步：安装依赖
      - name: Install dependencies
        run: |
          npm install -g javascript-obfuscator  # 全局安装JS混淆工具
          sudo apt-get install -y unzip curl    # 安装解压工具和curl（用于下载文件）

      # 第四步：下载最新worker并处理
      - name: Download and extract latest BPB worker
        run: |
          # 通过GitHub API获取最新版worker.zip的下载链接
          LATEST_URL=$(curl -s https://api.github.com/repos/bia-pain-bache/BPB-Worker-Panel/releases/latest | grep "browser_download_url.*worker.zip" | cut -d '"' -f 4)
          
          # 下载文件并保存为worker.zip
          wget "$LATEST_URL" -O worker.zip
          
          # 解压并将内容直接输出到origin.js（不依赖原文件名）
          unzip -p worker.zip > origin.js
          
          # 使用javascript-obfuscator混淆代码
          javascript-obfuscator origin.js --output _worker.js \
            --compact true \                  # 压缩代码
            --identifier-names-generator hexadecimal \  # 变量名转为16进制
            --rename-globals true \            # 重命名全局变量
            --string-array true \              # 加密字符串
            --string-array-encoding 'base64' \ # 使用base64编码
            --string-array-threshold 0.75 \    # 75%以上的字符串会被加密
            --transform-object-keys true \     # 混淆对象键名
            --self-defending false \           # 关闭反调试（可根据需要开启）
            --simplify true                   # 简化代码逻辑

      # 第五步：提交变更
      - name: Commit and push changes
        run: |
          # 配置git用户信息（使用GitHub Actions的机器人账号）
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # 添加要提交的文件
          git add origin.js _worker.js
          
          # 检查文件是否有变化
          if git diff-index --quiet HEAD --; then
            echo "没有检测到文件变化，跳过提交"
          else
            # 提交变更（包含时间戳）
            git commit -m ":arrow_up: 自动更新worker文件 [$(date +'%Y-%m-%d %H:%M:%S')]"
            
            # 同步远程变更（避免冲突）
            git pull --rebase origin main
            
            # 推送变更到main分支
            git push origin main
          fi
